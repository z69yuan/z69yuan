<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Framework on 69yuan</title>
    <link>https://z69yuan.github.io/categories/framework/</link>
    <description>Recent content in Framework on 69yuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 69yuan</copyright>
    <lastBuildDate>Sun, 11 Dec 2022 06:48:03 +0800</lastBuildDate><atom:link href="https://z69yuan.github.io/categories/framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Handler</title>
      <link>https://z69yuan.github.io/posts/frameworks/03_handle/</link>
      <pubDate>Sun, 11 Dec 2022 06:48:03 +0800</pubDate>
      
      <guid>https://z69yuan.github.io/posts/frameworks/03_handle/</guid>
      <description>一、几个问题 Handle的作用是什么？ Handle大体处理流程是怎样的？ 消息是怎么获得的？ 消息类型有几种，各自是怎样的? Handle底层是怎么实现的？发送消息时， 目标线程是怎么知道的 Idle Handle 是怎么应用的 </description>
    </item>
    
    <item>
      <title>烧录AOSP镜像到手机</title>
      <link>https://z69yuan.github.io/posts/frameworks/02_%E7%83%A7%E5%BD%95aosp%E9%95%9C%E5%83%8F%E5%88%B0%E6%89%8B%E6%9C%BA/</link>
      <pubDate>Thu, 26 May 2022 12:28:39 +0800</pubDate>
      
      <guid>https://z69yuan.github.io/posts/frameworks/02_%E7%83%A7%E5%BD%95aosp%E9%95%9C%E5%83%8F%E5%88%B0%E6%89%8B%E6%9C%BA/</guid>
      <description>一、 准备工作 进入BL(BootLoader)页面
首先需要能够使用adb 对设备进行操作，然后执行如下命令，进入FL中
adb reboot bootloader 确保OEM 处于Unlocked状态
fastboot flashing unlock (不同设备OEM解锁，我在欧洲版Pixel 3a，bootloader是可以解锁的，至于其他设备的可以查看谷歌烧录教程) 二、 利用官方包刷机 去官网找对应机型的镜像文件。
这是Pixel的镜像文件 链接: https://pan.baidu.com/s/1uaxFXm8seXJaVs6Un5P6UQ 提取码: kldf &amp;ndash;来自百度网盘超级会员v6的分享
待下载完成后，解压对应的压缩包，得到：
并执行 flash-all.sh 脚本
三、利用自己编译的镜像刷机 可选执行命令
source ./build/envsetup.sh(如果执行了，可以不用执行) lunch aosp_sargo-userdebug(如果执行了，可以不用执行） 设置ANDROID_PRODUCT_OUT路径
执行刷机命令
fastboot flashall -w -w 表示 格式化数据
四、参考链接 官网刷机教程 android 源码下载、编译与烧录到Pixel 3a </description>
    </item>
    
    <item>
      <title>MacOs编译AndroidQ</title>
      <link>https://z69yuan.github.io/posts/frameworks/01_macos%E7%BC%96%E8%AF%91android10/</link>
      <pubDate>Thu, 26 May 2022 07:36:38 +0800</pubDate>
      
      <guid>https://z69yuan.github.io/posts/frameworks/01_macos%E7%BC%96%E8%AF%91android10/</guid>
      <description>一、准备工作 1.1 系统介绍 Mac系统版本： 12.3.1
内存： 16GB
**CPU: ** 4核i5 2GHz
磁盘：180GB
笔者曾在 Ubuntu中编译该版本，最后占用磁盘空间为154GB。具体请查看 Ubuntu16.04编译Android10源码并刷机Pixel
1.2 AOSP版本选择 编译选择user、user-debug、eng的区别 1.3 磁盘准备 MacOS会在一个保留大小写，但是不区分大小的文件系统中运行。git不支持。所以需要开辟一块磁盘空间，并重新设计其格式。
在Mac Pro中，格式一块大小为 175GB的磁盘。
hdiutil create -type SPARSE -fs &amp;#39;Case-sensitive Journaled HFS+&amp;#39; -size 175g ~/Downloans/android10.dmg 执行命令后：
如果后期需要调整磁盘空间，可以使用：
hdiutil resize -size &amp;lt;new-size-you-want&amp;gt;g ~/android.dmg.sparseimage 挂载磁盘： 可以将挂架命令封装为一个函数，放在shell中，便于后面使用
# mount the android file image function mountAndroid { hdiutil attach ~/android.dmg -mountpoint /Volumes/android; } 挂载出错：
解决办法：
macOS打开dmg安装包提示 “资源忙”的解决方案
将disk相关的任务杀掉。
二、源码下载 2.1 Python2.7安装(可选) [python2.7 安装包](链接: https://pan.baidu.com/s/1_rxHpvv10FTOm77pl83hxQ 提取码: ndl6 &amp;ndash;来自百度网盘超级会员v6的分享)</description>
    </item>
    
  </channel>
</rss>
